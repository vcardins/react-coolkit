{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx", "react", "react-hooks", "import"],
  "parserOptions": { "ecmaVersion": "latest", "sourceType": "module" },
  "env": {
    "browser": true,
    "es2021": true,
    "jest": true
  },
  "extends": ["eslint:recommended"],
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "extends": ["plugin:@nx/typescript", "plugin:react/recommended", "plugin:react-hooks/recommended", "plugin:@typescript-eslint/recommended"],
      "parser": "@typescript-eslint/parser",
      "settings": {
        "react": {
          "reactVersion": "detect"
        }
      },
      "rules": {
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ],
        "@typescript-eslint/ban-ts-comment": "warn",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "vars": "all",
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "^_",
            "caughtErrorsIgnorePattern": "^_",
            "args": "after-used",
            "ignoreRestSiblings": false
          }
        ],
        // Best Practices
        // These rules relate to better ways of doing things to help you avoid problems:
        "no-case-declarations": "off",
        "no-useless-escape": "off",
        // Strict Mode
        // These rules relate to strict mode directives:

        "strict": ["error", "global"],

        // Variables
        // These rules relate to variable declarations:

        "init-declarations": "off",
        "no-delete-var": "off",
        "no-label-var": "off",
        "no-restricted-globals": "off",
        "no-shadow": "off",
        "no-shadow-restricted-names": "off",
        "no-undef": "off",
        "no-undef-init": "off",
        "no-undefined": "off",
        "no-unused-vars": "off",
        "no-debugger": "error",
        "sort-imports": [
          "error",
          {
            "ignoreCase": true,
            "ignoreDeclarationSort": true
          }
        ],
        "import/order": [
          "error",
          {
            "groups": ["builtin", "external", "internal", ["parent", "sibling"], "index"],
            "pathGroups": [
              {
                "pattern": "@(react|react-router-dom)",
                "group": "external",
                "position": "before"
              },
              {
                "pattern": "@libs/**",
                "group": "internal"
              }
            ],
            "pathGroupsExcludedImportTypes": ["internal", "react"],
            "newlines-between": "always",
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            }
          }
        ],
        // Node.js and CommonJS
        // These rules relate to code running in Node.js, or in browsers with CommonJS:

        "callback-return": "off",
        "global-require": "off",
        "handle-callback-err": "off",
        "no-buffer-constructor": "off",
        "no-mixed-requires": "off",
        "no-new-require": "off",
        "no-path-concat": "off",
        "no-process-env": "off",
        "no-process-exit": "off",
        "no-restricted-modules": "off",
        "no-sync": "off",

        // Stylistic Issues
        // These rules relate to style guidelines, and are therefore quite subjective:

        "array-bracket-newline": "off",
        "array-bracket-spacing": ["error", "never"],
        "array-element-newline": "off",
        "block-spacing": ["error", "always"],
        "brace-style": ["error", "stroustrup"],
        "camelcase": "off", //["warn", { "properties": "always" }],
        "capitalized-comments": "off",
        "comma-dangle": ["error", "always-multiline"],
        "comma-spacing": ["error", { "before": false, "after": true }],
        "comma-style": ["error", "last"],
        "computed-property-spacing": "off",
        "consistent-this": ["error", "_this"],
        "eol-last": "off",
        "func-call-spacing": "off",
        "func-name-matching": "off",
        "prefer-exponentiation-operator": "off",
        "default-param-last": "off",
        "func-names": "error",
        "func-style": ["error", "declaration", { "allowArrowFunctions": true }],
        "function-paren-newline": "off",
        "function-call-argument-newline": "off",
        "id-blacklist": "off",
        "id-length": "off",
        "id-match": "off",
        "implicit-arrow-linebreak": "off",
        "indent": [
          "error",
          "tab",
          {
            "SwitchCase": 1,
            "offsetTernaryExpressions": true,
            "flatTernaryExpressions": true
          }
        ],
        "jsx-quotes": ["error", "prefer-double"],
        "keyword-spacing": ["error", { "before": true, "after": true }],
        "line-comment-position": "off",
        "linebreak-style": "off",
        "lines-around-comment": "off",
        "lines-between-class-members": "off",
        "max-depth": "off",
        "max-len": "off",
        "max-lines": "off",
        "max-lines-per-function": "off",
        "max-nested-callbacks": "off",
        "max-params": "off",
        "max-statements": "off",
        "max-statements-per-line": "off",
        "multiline-comment-style": "off",
        "multiline-ternary": "off",
        "new-cap": "off",
        "new-parens": "off",
        "newline-per-chained-call": "off",
        "no-array-constructor": "off",
        "no-bitwise": "off",
        "no-continue": "off",
        "no-inline-comments": "off",
        "no-lonely-if": "off",
        "no-mixed-operators": "off",
        "no-mixed-spaces-and-tabs": "error",
        "no-multi-assign": "off",
        "no-multiple-empty-lines": "off",
        "no-negated-condition": "off",
        "no-nested-ternary": "off",
        "no-new-object": "off",
        "no-plusplus": "off",
        "no-restricted-syntax": "off",
        "no-tabs": "off",
        "no-ternary": "off",
        "no-trailing-spaces": "error",
        "no-underscore-dangle": "off",
        "no-unneeded-ternary": "error",
        "no-whitespace-before-property": "off",
        "nonblock-statement-body-position": "off",
        "object-curly-newline": "off",
        "object-curly-spacing": ["error", "always"], // enforce consistent spacing inside braces
        "object-property-newline": "off",
        "one-var": "off",
        "one-var-declaration-per-line": "off",
        "operator-assignment": "off",
        "operator-linebreak": "off",
        "padded-blocks": ["error", "never"],
        "padding-line-between-statements": ["error", { "blankLine": "always", "prev": "*", "next": "return" }, { "blankLine": "always", "prev": ["const", "let", "var"], "next": "*" }, { "blankLine": "any", "prev": ["const", "let", "var"], "next": ["const", "let", "var"] }],
        "prefer-object-spread": "off",
        "quote-props": ["error", "as-needed"],
        "quotes": ["error", "single"],
        "semi": ["error", "always"],
        "semi-spacing": "off",
        "semi-style": "off",
        "sort-keys": "off",
        "sort-vars": "off",
        "space-before-blocks": "off",
        "space-before-function-paren": "off",
        "space-in-parens": "error",
        "space-infix-ops": "error",
        "space-unary-ops": ["error", { "words": true, "nonwords": false }],
        "spaced-comment": "off",
        "switch-colon-spacing": "off",
        "template-tag-spacing": "off",
        "unicode-bom": "off",
        "wrap-regex": "off",

        // ECMAScript 6
        // These rules relate to ES6, also known as ES2015:

        "arrow-body-style": ["error", "as-needed"],
        "arrow-parens": ["error", "always"],
        "arrow-spacing": ["error", { "before": true, "after": true }],
        "constructor-super": "off",
        "generator-star-spacing": "off",
        "no-class-assign": "off",
        "no-confusing-arrow": "off",
        "no-const-assign": "error",
        "no-dupe-class-members": "off",
        "no-duplicate-imports": "off",
        "no-new-symbol": "off",
        "no-restricted-imports": "error",
        "no-this-before-super": "off",
        "no-useless-computed-key": "off",
        "no-useless-constructor": "off",
        "no-useless-rename": "off",
        "no-var": "error",
        "object-shorthand": "error",
        "prefer-arrow-callback": "off",
        "prefer-const": "error",
        "prefer-destructuring": "off",
        "prefer-numeric-literals": "off",
        "prefer-rest-params": "off",
        "prefer-spread": "off",
        "prefer-template": "error",
        "require-yield": "off",
        "rest-spread-spacing": "off",
        "symbol-description": "off",
        "template-curly-spacing": "error",
        "yield-star-spacing": "off",

        // React Hooks rules
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "warn",

        "react/jsx-newline": "off",
        "react/jsx-closing-bracket-location": [1, "tag-aligned"],
        "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
        "react/jsx-curly-spacing": [
          "warn",
          {
            "when": "never",
            "children": true
          }
        ],
        "react/jsx-wrap-multilines": [
          "error",
          {
            "declaration": "parens",
            "assignment": "parens",
            "return": "parens",
            "arrow": "ignore",
            "condition": "ignore",
            "logical": "ignore",
            "prop": "ignore"
          }
        ],
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-explicit-any": "off", // Disallow usage of the any type (no-any from TSLint)

        "react/jsx-uses-react": "error",
        "react/jsx-pascal-case": "error", // Enforce PascalCase for user-defined JSX components
        "react/display-name": "off",
        "react/void-dom-elements-no-children": "error",
        "react/jsx-no-constructed-context-values": "warn", // TODO: Should be addressed asap
        "react/boolean-prop-naming": "off", // Enforces consistent naming for boolean props
        "react/button-has-type": "error", // Forbid "button" element without an explicit "type" attribute
        "react/default-props-match-prop-types": "error", // Prevent extraneous defaultProps on components
        "react/jsx-no-undef": "error",
        "react/destructuring-assignment": "off", // Rule enforces consistent usage of destructuring assignment in component
        "react/forbid-component-props": "off", // Forbid certain props on Components
        "react/forbid-dom-props": "off", // Forbid certain props on DOM Nodes
        "react/forbid-elements": "off", // Forbid certain elements
        "react/forbid-prop-types": "off", // Forbid certain propTypes
        "react/forbid-foreign-prop-types": "off", // Forbid foreign propTypes
        "react/no-access-state-in-setstate": "off", // Prevent using this.state inside this.setState
        "react/no-array-index-key": "off", // Prevent using Array index in key props
        "react/no-children-prop": "off", // Prevent passing children as props
        "react/no-danger": "off", // Prevent usage of dangerous JSX properties
        "react/no-danger-with-children": "off", // Prevent problem with children and props.dangerouslySetInnerHTML
        "react/no-deprecated": "off", // Prevent usage of deprecated methods, including component lifecyle methods
        "react/no-direct-mutation-state": "off", // Prevent direct mutation of this.state
        "react/no-find-dom-node": "off", // Prevent usage of findDOMNode
        "react/no-is-mounted": "off", // Prevent usage of isMounted
        "react/no-multi-comp": "off", // Prevent multiple component definition per file
        "react/no-redundant-should-component-update": "off", // Prevent usage of shouldComponentUpdate when extending React.PureComponent
        "react/no-render-return-value": "off", // Prevent usage of the return value of React.render
        "react/no-set-state": "off", // Prevent usage of setState
        "react/no-typos": "off", // Prevent common casing typos
        "react/no-string-refs": "off", // Prevent using string references in ref attribute.
        "react/no-this-in-sfc": "off", // Prevent using this in stateless functional components
        "react/no-unescaped-entities": "off", // Prevent invalid characters from appearing in markup
        "react/no-unknown-property": "error", // Prevent usage of unknown DOM property (fixable)
        "react/no-unsafe": "off", // Prevent usage of unsafe lifecycle methods
        "react/no-unused-prop-types": "off", // Prevent definitions of unused prop types
        "react/no-unused-state": "error", // Prevent definitions of unused state properties
        "react/no-will-update-set-state": "off", // Prevent usage of setState in componentWillUpdate
        "react/prefer-es6-class": "off", // Enforce ES5 or ES6 class for React Components
        "react/prefer-stateless-function": "off", // Enforce stateless React Components to be written as a pure function
        "react/prop-types": "off", // Prevent missing props validation in a React component definition
        "react/react-in-jsx-scope": "off", // Prevent missing React when using JSX
        "react/jsx-props-no-spreading": "off",
        "react/jsx-curly-newline": "off",
        "react/static-property-placement": "off",
        "react/require-default-props": "off", // Enforce a defaultProps definition for every prop that is not a required prop
        "react/require-optimization": "off", // Enforce React components to have a shouldComponentUpdate method
        "react/require-render-return": "off", // Enforce ES5 or ES6 class for returning value in render function
        "react/self-closing-comp": [
          "error",
          {
            "component": true,
            "html": true
          }
        ], // Prevent extra closing tags for components without children (fixable)

        "react/jsx-no-leaked-render": ["error", { "validStrategies": ["ternary"] }],
        "react/jsx-max-depth": ["warn", { "max": 5 }],
        "react/function-component-definition": ["warn", { "namedComponents": "arrow-function" }],
        "react/jsx-key": [
          "error",
          {
            "checkFragmentShorthand": true,
            "checkKeyMustBeforeSpread": true,
            "warnOnDuplicates": true
          }
        ],
        "react/jsx-no-useless-fragment": "error",
        "react/jsx-curly-brace-presence": "error",
        "react/jsx-sort-props": "off",
        "react/jsx-one-expression-per-line": "off"
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nx/javascript"]
    }
  ]
}
